вопрос 1)  Что такое ООП?
вопрос 2)  Что такое обьект?
вопрос 3)  Назовите основные принципы ООП.
вопрос 4)  Что такое наследование?
вопрос 5)  Что такое полиморфизм? Какие проявления полиморфизма в Java Вы знаете?
вопрос 6)  Что такое инкапсуляция?
вопрос 7)  Что такое aбстракция?
вопрос 8)  В чем преимущества объектно-ориентированных языков программирования?
вопрос 9)  Как использование объектно – ориентерованного подхода улучшает разработку программного обеспечения?
вопрос 10)  Имеется выражение «является»  и «имеет». Что они подразумевают в плане принципов ООП? В  чем разница между композицией и агрегацией? 
вопрос 11)  Что вы подразумеваете под  полиморфизмом, инкапсуляцией и динамическим связыванием?
вопрос 12)  Чем отличаются JRE, JVM и JDK?
вопрос 13)  Опишите модификаторы доступа в Java.
вопрос 14)  Что такое package level access ?
вопрос 15)  Чем абстрактный класc отличается от интерфейса? В каких случаях Вы бы использовали абстрактный класс, а в каких интерфейс?
вопрос 16)  Может ли объект получить доступ к private-переменной класса? Если, да, то каким образом?
вопрос 17)  Для чего в джаве статические блоки?
вопрос 18)  Можно ли перегрузить static метод?
вопрос 19)  Расскажите про внутренние классы. Когда вы их будете использовать?
вопрос 20)  В чем разница между переменной экземпляра и статической переменной? Приведите пример.
вопрос 21)  Приведите пример когда можно использовать статический метод?
вопрос 22)  Расскажите про классы - загрузчики и про динамическую зарузку классов.
вопрос 23)  Что такое статическая и что такое динамическая загрузка класса?
вопрос 24)  Для чего нужен оператор "assert" в джава?
вопрос 25)  Почему в некоторых интерфейсах  вообще не определяют методов?
вопрос 26)  Какая основная разница между String, StringBuffer, StringBuilder?
вопрос 27)  Расскажите про потоки ввода-вывода Java.
вопрос 28)  Что такое Heap и Stack память в Java?
вопрос 29)  Какая разница между Stack и Heap памятью в Java?
вопрос 30)  Расскажите про модель памяти в джава?
вопрос 31)  Как работает сборщик мусора (garbage collector)?
вопрос 32)  Расскажите про приведение типов. Что такое понижение и повышение типа? Когда вы получаете ClassCastException?
вопрос 33)  Что такое статический класс, какие особенности его использования?
вопрос 34)  Каким образом из вложенного класса получить доступ к полю внешнего класса.
вопрос 35)  Какие существуют типы вложенных классов? Для чего они используются?
вопрос 36)  Возможно ли при переопределении (override) метода изменить:
 1) Модификатор доступа,
 2) Возвращаемый тип,
 3) Тип аргумента или количество,
 4) Имя аргументов,
  5) Изменять порядок, количество или вовсе убрать секцию throws?
вопрос 37)  Что такое autoboxing?
вопрос 38)  Что такое Generics?
вопрос 39)  Какова истинная цель использования обобщенных типов в Java?
вопрос 40)  Каким образом передаются переменные в методы, по значению или по ссылке?
вопрос 41)  Какие методы есть у класса Object?
вопрос 42)  Правила переопределения метода Object.equals().
вопрос 43)  Если вы хотите переопределить equals(), какие условия должны удовлетворяться для переопределенного метода?
вопрос 44)  Какая связь между hashCode и equals?
вопрос 45)  Каким образом реализованы методы hashCode и equals в классе Object?
вопрос 46)  Что будет, если переопределить equals не переопределяя hashCode? Какие могут возникнуть проблемы?
вопрос 47)  Есть ли какие-либо рекомендации о том, какие поля следует использовать при подсчете hashCode? 
вопрос 48)  Для чего нужен метод hashCode()?
вопрос 49)  Правила переопределения метода Object.hashCode().
вопрос 50)  Расскажите про клонирование объектов. В чем отличие между поверхностным и глубоким клонированием?
вопрос 51)  Правила переопределения метода Object.clone().
вопрос 52)  Где и как вы можете использовать  закрытый конструктор?
вопрос 53)  Что такое конструктор по умолчанию?
вопрос 54)  Опишите метод Object.finalize().
вопрос 55)  Чем отличаются слова final, finally и finalize?
вопрос 56)  Опишите иерархию исключений.
вопрос 57)  Какие виды исключений в Java вы знаете, чем они отличаются?
вопрос 58)  Что такое checked и unchecked Exception?
вопрос 59)  Как создать свой unchecked Exception?
вопрос 60)  Какие есть Unchecked Exceptions?
вопрос 61)  Что такое Error?
вопрос 62)  Опишите работу блока try-catch-finally.
вопрос 63)  Возможно ли использование блока try-finally (без catch)?
вопрос 64)  Всегда ли исполняется блок finally?
вопрос 65)  Какие есть оссобенности класса String? Что делает метод intern().
вопрос 66)  Можно ли наследовать строковый тип, почему?
вопрос 67)  Почему строка является популярным ключом в HashMap в Java?
вопрос 68)  Дайте определение понятию конкатенация строк.
вопрос 69)  Как перевернуть строку?
вопрос 70)  Как сравнить значение двух строк?
вопрос 71)  Как обрезать пробелы в начале и конце строки?
вопрос 72)  Дайте определение понятию "пул строк".
вопрос 73)  Можно ли синхронизировать доступ к строке?
вопрос 74)  Как правильно сравнить значения строк двух различных объектов типа String и StringBuffer?
вопрос 75)  Почему строка неизменная и финализированная в Java?
вопрос 76)  Напишите метод удаления данного символа из строки.
вопрос 77)  Что такое рефлексия? 
вопрос 78)  Что произойдет со сборщиком мусора (GC), если во время выполнения метода finalize() некоторого объекта произойдет исключение?
вопрос 79)  Что такое интернационализация, локализация?
вопрос 80)  Что такое Аннотации в Java?
вопрос 81)  Какие функции выполняет Аннотации?
вопрос 82)  Какие встроенные аннотации в Java вы знаете?
вопрос 83)  Что делают аннотации @Retention, @Documented, @Target и @Inherited?
вопрос 84)  Что делают аннотации @Override, @Deprecated, @SafeVarargs и @SuppressWarnings?
вопрос 85)  Какой жизненный цикл аннотации можно указать с помощью @Retention?
вопрос 86)  К каким элементам можно применять аннотацию, как это указать?
вопрос 87)  Как создать свою Аннотацию?
вопрос 88)  Атрибуты каких типов допустимы в аннотациях?
вопрос 89)  Что такое JMX?
вопрос 90)  Какие выгоды предлагает JMX?
вопрос 91)  Что еще умеет JMX кроме дистанционного управления?
вопрос 92)  Что такое MBean?
вопрос 93)  Какие типы MBeans существуют?
вопрос 94)  Что такое MBean Server?
вопрос 95)  Какие механизмы обеспечивают безопасность в технологии Java?
вопрос 96)  Назовите несколько видов проверок которые выполняет верификатор байт-кода Java?
вопрос 97)  Что вы знаете о "диспетчере защиты" в Java?
вопрос 98)  Что такое JAAS?
вопрос 99)  Что такое Рефакторинг?
вопрос 100)  Что такое Коллекция?
вопрос 101)  Назовите основные интерфейсы коллекций и их имплементации.
вопрос 102)  Чем отличается ArrayList от LinkedList? В каких случаях лучше использовать первый, а в каких второй?
вопрос 103)  Чем отличается HashMap от Hashtable?
вопрос 104)  Чем отличается ArrayList от Vector?
вопрос 105)  Как сравниваются елементы коллекций?
вопрос 106)  Расположите в виде иерархии следующие интерфейсы: List, Set, Map, SortedSet, SortedMap, Collection,Iterable, Iterator, NavigableSet, NavigableMap.
вопрос 107)  Почему Map - это не Collection, в то время как List и Set являются Collection?
вопрос 108)  Дайте определение понятию "iterator".
вопрос 109)  Что вы знаете об интерфейсе Iterable?
вопрос 110)  Как одной строчкой преобразовать HashSet в ArrayList?
вопрос 111)  Как одной строчкой преобразовать ArrayList в HashSet?
вопрос 112)  Как перебрать все ключи Map учитывая, что Map - это не Iterable?
вопрос 113)  Как перебрать все значения Map учитывая, что Map - это не Iterable?
вопрос 114)  Как перебрать все пары ключ-значение в Map учитывая, что Map - это не Iterable?
вопрос 115)  В чем проявляется 'сортированность' SortedMap, кроме того, что toString()  выводит все по порядку?
вопрос 116)  Как одним вызовом копировать элементы из любой Collection в массив?
вопрос 117)  Реализуйте симметрическую разность двух коллекций используя методы Collection (addAll(), removeAll(), retainAll()).
вопрос 118)  Сравните Enumeration и Iterator.
вопрос 119)  Как между собой связаны Iterable и Iterator?
вопрос 120)  Как между собой связаны Iterable, Iterator и 'for-each' введенный в Java 5?
вопрос 121)  Сравните Iterator и ListIterator.
вопрос 122)  Что произойдет, если я вызову Iterator.next() не "спросив" Iterator.hasNext()?
вопрос 123)  Что произойдет, если я вызову Iterator.next() перед этим 10 раз вызвав Iterator.hasNext()? Я пропущу 9 элементов?
вопрос 124)  Если у меня есть коллекция и порожденный итератор, изменится ли коллекция, если я вызову iterator.remove()?
вопрос 125)  Если у меня есть коллекция и порожденный итератор, изменится ли итератор, если я вызову collection.remove(..)?
вопрос 126)  Зачем добавили ArrayList, если уже был Vector?
вопрос 127)  В реализации класса ArrayList есть следующие поля: Object[] elementData, int size. Объясните, зачем хранить отдельно size, если всегда можно взять elementData.length?
вопрос 128)  LinkedList - это односвязный, двусвязный или четырехсвязный список?
вопрос 129)  Какое худшее время работы метода contain() для элемента, который есть  в LinkedList (O(1), O(log(N)), O(N), O(N*log(N)), O(N*N))?
вопрос 130)  Какое худшее время работы метода contain() для элемента, который есть в ArrayList (O(1), O(log(N)), O(N), O(N*log(N)), O(N*N))?
вопрос 131)  Какое худшее время работы метода add() для LinkedList (O(1), O(log(N)), O(N), O(N*log(N)), O(N*N))?
вопрос 132)  Какое худшее время работы метода add() для ArrayList (O(1), O(log(N)), O(N), O(N*log(N)), O(N*N))?
вопрос 133)  Сколько выделяется элементов в памяти при вызове ArrayList.add()?
вопрос 134)  Сколько выделяется элементов в памяти при вызове LinkedList.add()?
вопрос 135)  Оцените количество памяти на хранение одного примитива типа byte в LinkedList?
вопрос 136)  Оцените количество памяти на хранение одного примитива типа byte в ArrayList?
вопрос 137)  Я добавляю элемент в середину List-а: list.add(list.size()/2, newElem). Для кого эта операция медленнее - для ArrayList или для LinkedList?
вопрос 138)  Как перебрать элементы LinkedList в обратном порядке, не используя медленный get(index)?
вопрос 139)  Как одним вызовом из List получить List со всеми элементами, кроме первых и последних 3-х?
вопрос 140)  Могут ли у разных объектов в памяти (ref0 != ref1) быть ref0.hashCode() == ref1.hashCode()?
вопрос 141)  Могут ли у разных объектов в памяти (ref0 != ref1) быть ref0.equals(ref1) == true?
вопрос 142)  Могут ли у разных ссылок на один объект в памяти (ref0 == ref1) быть ref0.equals(ref1) == false?
вопрос 143)  Есть класс Point{int x, y;}. Почему хэш-код в виде 31 * x + y предпочтительнее чем x + y?
вопрос 144)  Если у класса Point{int x, y;} 'правильно' реализовать метод equals(return ref0.x == ref1.x && ref0.y == ref1.y), но сделать хэш-код в виде int hashCode() {return x;}, то будут ли корректно такие точки помещаться и извлекаться из HashSet? 
вопрос 145)  equals() порождает отношение эквивалентности. Какими из свойств обладает такое отношение: коммутативность, симметричность, рефлексивность, дистрибутивность, ассоциативность, транзитивность?
вопрос 146)  Можно ли так реализовать equals(Object that){return this.hashCode() == that.hashCode()}?
вопрос 147)  В equals требуется проверять, что аргумент (equals(Object that)) такого же типа
 как и сам объект. В чем разница между this.getClass() == that.getClass() и that instanceof MyClass?
вопрос 148)  Можно ли реализовать метод equals класса MyClass вот так: class MyClass{public boolean equals(MyClass that) {return this == that;}}? 
вопрос 149)  Будет ли работать HashMap, если все ключи будут возвращать int hashCode() {return 42;}?
вопрос 150)  Зачем добавили HashMap, если уже был Hashtable? 
вопрос 151)  Согласно Кнуту и Кормену существует две основных реализации хэш-таблицы: на основе открытой адресацией и на основе метода цепочек. Как реализована HashMap? Почему так сделали (по вашему мнению)? В чем минусы и плюсы каждого подхода?
вопрос 152)  Сколько переходов по ссылкам происходит, когда вы делаете HashMap.get(key) по ключу, который есть в таблице?
вопрос 153)  Сколько создается новых объектов, когда вы добавляете новый элемент в HashMap?
вопрос 154)  Как работает HashMap при попытке сохранить в нее два элемента по ключам с одинаковым hashCode, но для которых equals == false? 
вопрос 155)  HashMap может выродиться в список даже для ключей с разным hashCode. Как это возможно?
вопрос 156)  Какое худшее время работы метода get(key) для ключа, которого нет в таблице (O(1), O(log(N)), O(N), O(N*log(N)), O(N*N))?
вопрос 157)  Какое худшее время работы метода get(key) для ключа, который есть в таблице (O(1), O(log(N)), O(N), O(N*log(N)), O(N*N))?
вопрос 158)  Объясните смысл параметров в конструкторе HashMap(int initialCapacity, float loadFactor).
вопрос 159)  В чем разница между HashMap и IdentityHashMap? Для чего нужна IdentityHashMap? Как может быть полезна для реализации сериализации или клонирования?
вопрос 160)  В чем разница между HashMap и WeakHashMap? Для чего нужна WeakHashMap?
вопрос 161)  В WeakHashMap используются WeakReferences. А почему бы не создать SoftHashMap на SoftReferences?
вопрос 162)  В WeakHashMap используются WeakReferences. А почему бы не создать PhantomHashMap на PhantomReferences?
вопрос 163)  Сделайте HashSet из HashMap (используйте только множество ключей, но не множество значений).
вопрос 164)  Сделайте HashMap из HashSet (HashSet<Map.Entry<K, V>>).
вопрос 165)  Сравните интерфейсы java.util.Queue и java.util.Deque.
вопрос 166)  Кто кого расширяет: Queue расширяет Deque, или Deque расширяет Queue?
вопрос 167)  Почему LinkedList реализует и List, и Deque?
вопрос 168)  В чем разница между классами java.util.Arrays и java.lang.reflect.Array?
вопрос 169)  В чем разница между классами java.util.Collection и java.util.Collections?
вопрос 170)  Напишите НЕмногопоточную программу, которая заставляет коллекцию выбросить ConcurrentModificationException.
вопрос 171)  Что такое "fail-fast поведение"?
вопрос 172)  Для множеств еnum-ов есть специальный класс java.util.EnumSet? Зачем? Чем авторов не устраивал HashSet или TreeSet?
вопрос 173)  java.util.Stack - считается 'устаревшим'. Чем его рекомендуют заменять? Почему?
вопрос 174)  Какая коллекция реализует дисциплину обслуживания FIFO?
вопрос 175)  Какая коллекция реализует дисциплину обслуживания FILO?
вопрос 176)  Приведите пример, когда какая-либо коллекция выбрасывает UnsupportedOperationException.
вопрос 177)  Почему нельзя написать 'ArrayList<List> numbers = new ArrayList<ArrayList>();' но можно "List<ArrayList> numbers = new ArrayList<ArrayList>();"? 
вопрос 178)  LinkedHashMap - что это еще за 'зверь'? Что в нем от LinkedList, а что от HashMap?
вопрос 179)  LinkedHashSet - что это еще за 'зверь'? Что в нем от LinkedList, а что от HashSet?
вопрос 180)  Говорят, на LinkedHashMap легко сделать простенький кэш c "invalidation policy", знаете как?
вопрос 181)  Что позволяет сделать PriorityQueue?
вопрос 182)  В чем заключаются отличия java.util.Comparator от java.lang.Comparable?
вопрос 183)  Какие нововведения, появились в Java 8?
вопрос 184)  Как сортировать список строк с помощью лямбда-выражения?
вопрос 185)  Какова структура лямбда-выражения?
вопрос 186)  К каким переменным есть доступ у Лямбда-выражений?
вопрос 187)  Что такое ссылки на метод?
вопрос 188)  Какие виды ссылок на методы вы знаете?
вопрос 189)  Объясните выражение System.out::println.
вопрос 190)  Что такое функциональные интерфейсы?
вопрос 191)  Для чего нужен функциональный интерфейс BiConsumer<T,U>?
вопрос 192)  Для чего нужен функциональный интерфейс BiFunction<T,U,R>?
вопрос 193)  Для чего нужен функциональный интерфейс BinaryOperator<T>?
вопрос 194)  Для чего нужен функциональный интерфейс BiPredicate<T,U>?
вопрос 195)  Для чего нужен функциональный интерфейс BooleanSupplier?
вопрос 196)  Для чего нужен функциональный интерфейс Consumer<T>?
вопрос 197)  Для чего нужен функциональный интерфейс DoubleBinaryOperator?
вопрос 198)  Для чего нужен функциональный интерфейс DoubleConsumer?
вопрос 199)  Для чего нужен функциональный интерфейс DoubleFunction<R>?
вопрос 200)  Для чего нужен функциональный интерфейс DoublePredicate?
вопрос 201)  Для чего нужен функциональный интерфейс DoubleSupplier?
вопрос 202)  Для чего нужен функциональный интерфейс DoubleToIntFunction?
вопрос 203)  Для чего нужен функциональный интерфейс DoubleToLongFunction?
вопрос 204)  Для чего нужен функциональный интерфейс DoubleUnaryOperator?
вопрос 205)  Для чего нужен функциональный интерфейс Function<T,R>?
вопрос 206)  Для чего нужен функциональный интерфейс IntBinaryOperator?
вопрос 207)  Для чего нужен функциональный интерфейс IntConsumer?
вопрос 208)  Для чего нужен функциональный интерфейс IntFunction<R>?
вопрос 209)  Для чего нужен функциональный интерфейс IntPredicate?
вопрос 210)  Для чего нужен функциональный интерфейс IntSupplier?
вопрос 211)  Для чего нужен функциональный интерфейс IntToDoubleFunction?
вопрос 212)  Для чего нужен функциональный интерфейс IntToLongFunction?
вопрос 213)  Для чего нужен функциональный интерфейс IntUnaryOperator?
вопрос 214)  Для чего нужен функциональный интерфейс LongBinaryOperator?
вопрос 215)  Для чего нужен функциональный интерфейс LongConsumer?
вопрос 216)  Для чего нужен функциональный интерфейс LongFunction<R>?
вопрос 217)  Для чего нужен функциональный интерфейс LongPredicate?
вопрос 218)  Для чего нужен функциональный интерфейс LongSupplier?
вопрос 219)  Для чего нужен функциональный интерфейс LongToDoubleFunction?
вопрос 220)  Для чего нужен функциональный интерфейс LongToIntFunction?
вопрос 221)  Для чего нужен функциональный интерфейс LongUnaryOperator?
вопрос 222)  Для чего нужен функциональный интерфейс ObjDoubleConsumer<T>?
вопрос 223)  Для чего нужен функциональный интерфейс ObjIntConsumer<T>?
вопрос 224)  Для чего нужен функциональный интерфейс ObjLongConsumer<T>?
вопрос 225)  Для чего нужен функциональный интерфейс Predicate<T>?
вопрос 226)  Для чего нужен функциональный интерфейс Supplier<T>?
вопрос 227)  Для чего нужен функциональный интерфейс ToDoubleBiFunction<T,U>?
вопрос 228)  Для чего нужен функциональный интерфейс ToDoubleFunction<T>?
вопрос 229)  Для чего нужен функциональный интерфейс ToIntBiFunction<T,U>?
вопрос 230)  Для чего нужен функциональный интерфейс ToIntFunction<T>?
вопрос 231)  Для чего нужен функциональный интерфейс ToLongBiFunction<T,U>?
вопрос 232)  Для чего нужен функциональный интерфейс ToLongFunction<T>?
вопрос 233)  Для чего нужен функциональный интерфейс UnaryOperator<T>?
вопрос 234)  Что такое StringJoiner?
вопрос 235)  Что такое default методы?
вопрос 236)  Что такое static методы?
вопрос 237)  Как вызывать default-метод интерфейса в классе?
вопрос 238)  Как вызывать static-метод интерфейса в классе?
вопрос 239)  Что такое потоки(stream) в Java 8
вопрос 240)  Для чего нужен метод collect Java 8?
вопрос 241)  В чем разница между коллекцией(Collection) и потоком(Stream)?
вопрос 242)  Для чего предназначен метод forEach в потоках(stream)?
вопрос 243)  Как вывести на экран 10 случайных чисел, используя forEach?
вопрос 244)  Для чего предназначен метод map в потоках(stream)?
вопрос 245)  Как можно вывести на экран уникальные квадраты чисел используя метод map?
вопрос 246)  Какова цель метода filter в потоках(stream)?
вопрос 247)  Как вывести на экран количество пустых строк с помощью метода filter?
вопрос 248)  Для чего предназначен метод limit в потоках(stream)?
вопрос 249)  Для чего предназначен метод sorted в потоках(stream)?
вопрос 250)  Как вывести на экран 10 случайных чисел в отсортированном порядке в Java 8?
вопрос 251)  Параллельная обработка в Java 8?
вопрос 252)  Как найти максимальное число в списке Java 8?
вопрос 253)  Как найти минимальное число в списке Java 8?
вопрос 254)  Как получить сумму всех чисел в списке, используя Java 8?
вопрос 255)  Как получить среднее значение всех чисел, в списке, используя Java 8?
вопрос 256)  Что такое Optional?
вопрос 257)  Что такое Nashorn?
вопрос 258)  Что такое jjs в Java 8?
вопрос 259)  Что такое LocalDateTime в Java 8?
вопрос 260)  Что такое ZonedDateTime в Java 8?
вопрос 261)  Как получить текущую дату с использованием time API из Java 8?
вопрос 262)  Как добавить 1 неделю к текущей дате с использованием time API?
вопрос 263)  Как добавить 1 месяц к текущей дате с использованием time API?
вопрос 264)  Как добавить 1 год к текущей дате с использованием time API?
вопрос 265)  Как добавить 10 лет к текущей дате с использованием time API?
вопрос 266)  Как получить следующий вторник используя time API?
вопрос 267)  Как получить вторую субботу текущего месяца используя time API?
вопрос 268)  Как получить текущую дату в 